
#alice_message_clair


alice_message_clair = "110110010010110100110101101001010001011011010011011011001010110010110100010101011001101101100110010110100100010110011001100100110100110010100110110110011010011011010101101100011010110100100110001011001100100101101010010100100101101000100101010011000110110010110010100110100110010011010010110011010011000110010010110100110110010100110100101011010100110110101011011000110101010010110100101100101010110011011011000110101101011011000"

from qiskit import QuantumCircuit, execute, Aer

def prepare_alice_qubit(j,base,clef):
    '''
    alice_prepare_qubit(j,base,clef) : cette fonction prépare un qubit d'Alice:

        - à la position j
        - en fonction du choix de la base à l'indice j
        - et en fonction de la valeur de la clef à l'indice j

            + si z et 0 : état |0> le circuit est vide
            + si z et 1 : état |1> le circuit contient une porte X
            + si x et 0 : état |+> le circuit contient une porte H
            + si x et 1 : état |-> le circuit contient une porte X et une porte H

       la fonction renvoie un QuantumCircuit qui à son exécution produit l'état voulu sur un qubit
             '''
    aqc = QuantumCircuit(1,1)
    if clef[j] == "1":
        aqc.x([0])
    if base[j] == "x":
        aqc.h([0])
    return aqc

def code(msg,key):
    ''' calcule le XOR bit à bit de deux bit-strings : msg et key
        il faut que la longueur de key > longueur de msg
    '''
    if len(msg) > len(key):
        print("La clef n'est pas assez longue, recommencez")
        return "La clef n'est pas assez longue, recommencez"
    else:
        res = ""
        for i in range(len(msg)):
            res += str( ( int(key[i]) + int(msg[i]) ) % 2 )
        return res
